// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

#ifndef PROTOBUF_metrics_2eproto__INCLUDED
#define PROTOBUF_metrics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace llmr {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_metrics_2eproto();
void protobuf_AssignDesc_metrics_2eproto();
void protobuf_ShutdownFile_metrics_2eproto();

class glyph;
class face;

// ===================================================================

class glyph : public ::google::protobuf::MessageLite {
 public:
  glyph();
  virtual ~glyph();

  glyph(const glyph& from);

  inline glyph& operator=(const glyph& from) {
    CopyFrom(from);
    return *this;
  }

  static const glyph& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const glyph* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(glyph* other);

  // implements Message ----------------------------------------------

  glyph* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const glyph& from);
  void MergeFrom(const glyph& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bytes bitmap = 2;
  inline bool has_bitmap() const;
  inline void clear_bitmap();
  static const int kBitmapFieldNumber = 2;
  inline const ::std::string& bitmap() const;
  inline void set_bitmap(const ::std::string& value);
  inline void set_bitmap(const char* value);
  inline void set_bitmap(const void* value, size_t size);
  inline ::std::string* mutable_bitmap();
  inline ::std::string* release_bitmap();
  inline void set_allocated_bitmap(::std::string* bitmap);

  // required uint32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required sint32 left = 5;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 5;
  inline ::google::protobuf::int32 left() const;
  inline void set_left(::google::protobuf::int32 value);

  // required sint32 top = 6;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 6;
  inline ::google::protobuf::int32 top() const;
  inline void set_top(::google::protobuf::int32 value);

  // required uint32 advance = 7;
  inline bool has_advance() const;
  inline void clear_advance();
  static const int kAdvanceFieldNumber = 7;
  inline ::google::protobuf::uint32 advance() const;
  inline void set_advance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:llmr.glyph)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bitmap();
  inline void clear_has_bitmap();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_advance();
  inline void clear_has_advance();

  ::std::string* bitmap_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::uint32 advance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_metrics_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_metrics_2eproto();
  #endif
  friend void protobuf_AssignDesc_metrics_2eproto();
  friend void protobuf_ShutdownFile_metrics_2eproto();

  void InitAsDefaultInstance();
  static glyph* default_instance_;
};
// -------------------------------------------------------------------

class face : public ::google::protobuf::MessageLite {
 public:
  face();
  virtual ~face();

  face(const face& from);

  inline face& operator=(const face& from) {
    CopyFrom(from);
    return *this;
  }

  static const face& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const face* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(face* other);

  // implements Message ----------------------------------------------

  face* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const face& from);
  void MergeFrom(const face& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string family = 1;
  inline bool has_family() const;
  inline void clear_family();
  static const int kFamilyFieldNumber = 1;
  inline const ::std::string& family() const;
  inline void set_family(const ::std::string& value);
  inline void set_family(const char* value);
  inline void set_family(const char* value, size_t size);
  inline ::std::string* mutable_family();
  inline ::std::string* release_family();
  inline void set_allocated_family(::std::string* family);

  // required string style = 2;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 2;
  inline const ::std::string& style() const;
  inline void set_style(const ::std::string& value);
  inline void set_style(const char* value);
  inline void set_style(const char* value, size_t size);
  inline ::std::string* mutable_style();
  inline ::std::string* release_style();
  inline void set_allocated_style(::std::string* style);

  // repeated .llmr.glyph glyphs = 5;
  inline int glyphs_size() const;
  inline void clear_glyphs();
  static const int kGlyphsFieldNumber = 5;
  inline const ::llmr::glyph& glyphs(int index) const;
  inline ::llmr::glyph* mutable_glyphs(int index);
  inline ::llmr::glyph* add_glyphs();
  inline const ::google::protobuf::RepeatedPtrField< ::llmr::glyph >&
      glyphs() const;
  inline ::google::protobuf::RepeatedPtrField< ::llmr::glyph >*
      mutable_glyphs();

  // @@protoc_insertion_point(class_scope:llmr.face)
 private:
  inline void set_has_family();
  inline void clear_has_family();
  inline void set_has_style();
  inline void clear_has_style();

  ::std::string* family_;
  ::std::string* style_;
  ::google::protobuf::RepeatedPtrField< ::llmr::glyph > glyphs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_metrics_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_metrics_2eproto();
  #endif
  friend void protobuf_AssignDesc_metrics_2eproto();
  friend void protobuf_ShutdownFile_metrics_2eproto();

  void InitAsDefaultInstance();
  static face* default_instance_;
};
// ===================================================================


// ===================================================================

// glyph

// required uint32 id = 1;
inline bool glyph::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void glyph::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void glyph::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void glyph::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 glyph::id() const {
  return id_;
}
inline void glyph::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes bitmap = 2;
inline bool glyph::has_bitmap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void glyph::set_has_bitmap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void glyph::clear_has_bitmap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void glyph::clear_bitmap() {
  if (bitmap_ != &::google::protobuf::internal::kEmptyString) {
    bitmap_->clear();
  }
  clear_has_bitmap();
}
inline const ::std::string& glyph::bitmap() const {
  return *bitmap_;
}
inline void glyph::set_bitmap(const ::std::string& value) {
  set_has_bitmap();
  if (bitmap_ == &::google::protobuf::internal::kEmptyString) {
    bitmap_ = new ::std::string;
  }
  bitmap_->assign(value);
}
inline void glyph::set_bitmap(const char* value) {
  set_has_bitmap();
  if (bitmap_ == &::google::protobuf::internal::kEmptyString) {
    bitmap_ = new ::std::string;
  }
  bitmap_->assign(value);
}
inline void glyph::set_bitmap(const void* value, size_t size) {
  set_has_bitmap();
  if (bitmap_ == &::google::protobuf::internal::kEmptyString) {
    bitmap_ = new ::std::string;
  }
  bitmap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* glyph::mutable_bitmap() {
  set_has_bitmap();
  if (bitmap_ == &::google::protobuf::internal::kEmptyString) {
    bitmap_ = new ::std::string;
  }
  return bitmap_;
}
inline ::std::string* glyph::release_bitmap() {
  clear_has_bitmap();
  if (bitmap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bitmap_;
    bitmap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void glyph::set_allocated_bitmap(::std::string* bitmap) {
  if (bitmap_ != &::google::protobuf::internal::kEmptyString) {
    delete bitmap_;
  }
  if (bitmap) {
    set_has_bitmap();
    bitmap_ = bitmap;
  } else {
    clear_has_bitmap();
    bitmap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 width = 3;
inline bool glyph::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void glyph::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void glyph::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void glyph::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 glyph::width() const {
  return width_;
}
inline void glyph::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// required uint32 height = 4;
inline bool glyph::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void glyph::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void glyph::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void glyph::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 glyph::height() const {
  return height_;
}
inline void glyph::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// required sint32 left = 5;
inline bool glyph::has_left() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void glyph::set_has_left() {
  _has_bits_[0] |= 0x00000010u;
}
inline void glyph::clear_has_left() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void glyph::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline ::google::protobuf::int32 glyph::left() const {
  return left_;
}
inline void glyph::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
}

// required sint32 top = 6;
inline bool glyph::has_top() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void glyph::set_has_top() {
  _has_bits_[0] |= 0x00000020u;
}
inline void glyph::clear_has_top() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void glyph::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline ::google::protobuf::int32 glyph::top() const {
  return top_;
}
inline void glyph::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
}

// required uint32 advance = 7;
inline bool glyph::has_advance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void glyph::set_has_advance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void glyph::clear_has_advance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void glyph::clear_advance() {
  advance_ = 0u;
  clear_has_advance();
}
inline ::google::protobuf::uint32 glyph::advance() const {
  return advance_;
}
inline void glyph::set_advance(::google::protobuf::uint32 value) {
  set_has_advance();
  advance_ = value;
}

// -------------------------------------------------------------------

// face

// required string family = 1;
inline bool face::has_family() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void face::set_has_family() {
  _has_bits_[0] |= 0x00000001u;
}
inline void face::clear_has_family() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void face::clear_family() {
  if (family_ != &::google::protobuf::internal::kEmptyString) {
    family_->clear();
  }
  clear_has_family();
}
inline const ::std::string& face::family() const {
  return *family_;
}
inline void face::set_family(const ::std::string& value) {
  set_has_family();
  if (family_ == &::google::protobuf::internal::kEmptyString) {
    family_ = new ::std::string;
  }
  family_->assign(value);
}
inline void face::set_family(const char* value) {
  set_has_family();
  if (family_ == &::google::protobuf::internal::kEmptyString) {
    family_ = new ::std::string;
  }
  family_->assign(value);
}
inline void face::set_family(const char* value, size_t size) {
  set_has_family();
  if (family_ == &::google::protobuf::internal::kEmptyString) {
    family_ = new ::std::string;
  }
  family_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* face::mutable_family() {
  set_has_family();
  if (family_ == &::google::protobuf::internal::kEmptyString) {
    family_ = new ::std::string;
  }
  return family_;
}
inline ::std::string* face::release_family() {
  clear_has_family();
  if (family_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_;
    family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void face::set_allocated_family(::std::string* family) {
  if (family_ != &::google::protobuf::internal::kEmptyString) {
    delete family_;
  }
  if (family) {
    set_has_family();
    family_ = family;
  } else {
    clear_has_family();
    family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string style = 2;
inline bool face::has_style() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void face::set_has_style() {
  _has_bits_[0] |= 0x00000002u;
}
inline void face::clear_has_style() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void face::clear_style() {
  if (style_ != &::google::protobuf::internal::kEmptyString) {
    style_->clear();
  }
  clear_has_style();
}
inline const ::std::string& face::style() const {
  return *style_;
}
inline void face::set_style(const ::std::string& value) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(value);
}
inline void face::set_style(const char* value) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(value);
}
inline void face::set_style(const char* value, size_t size) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* face::mutable_style() {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  return style_;
}
inline ::std::string* face::release_style() {
  clear_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = style_;
    style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void face::set_allocated_style(::std::string* style) {
  if (style_ != &::google::protobuf::internal::kEmptyString) {
    delete style_;
  }
  if (style) {
    set_has_style();
    style_ = style;
  } else {
    clear_has_style();
    style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .llmr.glyph glyphs = 5;
inline int face::glyphs_size() const {
  return glyphs_.size();
}
inline void face::clear_glyphs() {
  glyphs_.Clear();
}
inline const ::llmr::glyph& face::glyphs(int index) const {
  return glyphs_.Get(index);
}
inline ::llmr::glyph* face::mutable_glyphs(int index) {
  return glyphs_.Mutable(index);
}
inline ::llmr::glyph* face::add_glyphs() {
  return glyphs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llmr::glyph >&
face::glyphs() const {
  return glyphs_;
}
inline ::google::protobuf::RepeatedPtrField< ::llmr::glyph >*
face::mutable_glyphs() {
  return &glyphs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llmr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_metrics_2eproto__INCLUDED

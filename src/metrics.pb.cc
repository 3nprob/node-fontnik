// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "metrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace llmr {

void protobuf_ShutdownFile_metrics_2eproto() {
  delete glyph::default_instance_;
  delete face::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_metrics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_metrics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  glyph::default_instance_ = new glyph();
  face::default_instance_ = new face();
  glyph::default_instance_->InitAsDefaultInstance();
  face::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_metrics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_metrics_2eproto_once_);
void protobuf_AddDesc_metrics_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_metrics_2eproto_once_,
                 &protobuf_AddDesc_metrics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_metrics_2eproto {
  StaticDescriptorInitializer_metrics_2eproto() {
    protobuf_AddDesc_metrics_2eproto();
  }
} static_descriptor_initializer_metrics_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int glyph::kIdFieldNumber;
const int glyph::kBitmapFieldNumber;
const int glyph::kWidthFieldNumber;
const int glyph::kHeightFieldNumber;
const int glyph::kLeftFieldNumber;
const int glyph::kTopFieldNumber;
const int glyph::kAdvanceFieldNumber;
#endif  // !_MSC_VER

glyph::glyph()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void glyph::InitAsDefaultInstance() {
}

glyph::glyph(const glyph& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void glyph::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  bitmap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_ = 0u;
  height_ = 0u;
  left_ = 0;
  top_ = 0;
  advance_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

glyph::~glyph() {
  SharedDtor();
}

void glyph::SharedDtor() {
  if (bitmap_ != &::google::protobuf::internal::kEmptyString) {
    delete bitmap_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void glyph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const glyph& glyph::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_metrics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_metrics_2eproto();
#endif
  return *default_instance_;
}

glyph* glyph::default_instance_ = NULL;

glyph* glyph::New() const {
  return new glyph;
}

void glyph::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_bitmap()) {
      if (bitmap_ != &::google::protobuf::internal::kEmptyString) {
        bitmap_->clear();
      }
    }
    width_ = 0u;
    height_ = 0u;
    left_ = 0;
    top_ = 0;
    advance_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool glyph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bitmap;
        break;
      }

      // optional bytes bitmap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // required uint32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // required uint32 height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_left;
        break;
      }

      // required sint32 left = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_top;
        break;
      }

      // required sint32 top = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_advance;
        break;
      }

      // required uint32 advance = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void glyph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes bitmap = 2;
  if (has_bitmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->bitmap(), output);
  }

  // required uint32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // required uint32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // required sint32 left = 5;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->left(), output);
  }

  // required sint32 top = 6;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->top(), output);
  }

  // required uint32 advance = 7;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->advance(), output);
  }

}

int glyph::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes bitmap = 2;
    if (has_bitmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bitmap());
    }

    // required uint32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required sint32 left = 5;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->left());
    }

    // required sint32 top = 6;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->top());
    }

    // required uint32 advance = 7;
    if (has_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advance());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void glyph::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const glyph*>(&from));
}

void glyph::MergeFrom(const glyph& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bitmap()) {
      set_bitmap(from.bitmap());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_advance()) {
      set_advance(from.advance());
    }
  }
}

void glyph::CopyFrom(const glyph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool glyph::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;

  return true;
}

void glyph::Swap(glyph* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bitmap_, other->bitmap_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(left_, other->left_);
    std::swap(top_, other->top_);
    std::swap(advance_, other->advance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string glyph::GetTypeName() const {
  return "llmr.glyph";
}


// ===================================================================

#ifndef _MSC_VER
const int face::kFamilyFieldNumber;
const int face::kStyleFieldNumber;
const int face::kGlyphsFieldNumber;
#endif  // !_MSC_VER

face::face()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void face::InitAsDefaultInstance() {
}

face::face(const face& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void face::SharedCtor() {
  _cached_size_ = 0;
  family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

face::~face() {
  SharedDtor();
}

void face::SharedDtor() {
  if (family_ != &::google::protobuf::internal::kEmptyString) {
    delete family_;
  }
  if (style_ != &::google::protobuf::internal::kEmptyString) {
    delete style_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const face& face::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_metrics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_metrics_2eproto();
#endif
  return *default_instance_;
}

face* face::default_instance_ = NULL;

face* face::New() const {
  return new face;
}

void face::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_family()) {
      if (family_ != &::google::protobuf::internal::kEmptyString) {
        family_->clear();
      }
    }
    if (has_style()) {
      if (style_ != &::google::protobuf::internal::kEmptyString) {
        style_->clear();
      }
    }
  }
  glyphs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string family = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_style;
        break;
      }

      // required string style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_glyphs;
        break;
      }

      // repeated .llmr.glyph glyphs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_glyphs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_glyphs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_glyphs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string family = 1;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->family(), output);
  }

  // required string style = 2;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->style(), output);
  }

  // repeated .llmr.glyph glyphs = 5;
  for (int i = 0; i < this->glyphs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->glyphs(i), output);
  }

}

int face::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string family = 1;
    if (has_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family());
    }

    // required string style = 2;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->style());
    }

  }
  // repeated .llmr.glyph glyphs = 5;
  total_size += 1 * this->glyphs_size();
  for (int i = 0; i < this->glyphs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->glyphs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void face::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const face*>(&from));
}

void face::MergeFrom(const face& from) {
  GOOGLE_CHECK_NE(&from, this);
  glyphs_.MergeFrom(from.glyphs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family()) {
      set_family(from.family());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
  }
}

void face::CopyFrom(const face& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool face::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < glyphs_size(); i++) {
    if (!this->glyphs(i).IsInitialized()) return false;
  }
  return true;
}

void face::Swap(face* other) {
  if (other != this) {
    std::swap(family_, other->family_);
    std::swap(style_, other->style_);
    glyphs_.Swap(&other->glyphs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string face::GetTypeName() const {
  return "llmr.face";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llmr

// @@protoc_insertion_point(global_scope)
